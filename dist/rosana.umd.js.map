{"version":3,"file":"rosana.umd.js","sources":["../.src/helpers.js","../.src/parser.js","../.src/control.js","../.src/layouts.js","../.src/signals.js","../.src/localize.js","../.src/suspense.js","../.src/+rosana.core.js","../.src/router.js","../.src/elements.js","../.src/html.js"],"sourcesContent":["/**@param {string} prefix */\r\nconst createUniqueIdGenerator = (prefix) => {\r\n    let count = 0;\r\n    return () => `${prefix}-${count++}`;\r\n};\r\n\r\nexport const generateId = createUniqueIdGenerator(\"rosana-id\");\r\nexport const generateClassName = createUniqueIdGenerator(\"rosana-class\");\r\n\r\n/**\r\n * Returns the system device theme; works in a browser environment.\r\n * @typedef {\"dark\" | \"light\"} SystemTheme\r\n * @returns {SystemTheme} - The system's color scheme, either \"dark\" or \"light\".\r\n */\r\nexport const $pageTheme = function () {\r\n    const darkThemeMq = window.matchMedia(\"(prefers-color-scheme: dark)\");\r\n    return darkThemeMq.matches ? \"dark\" : \"light\";\r\n};\r\n\r\n/**\r\n * Attaches an event listener to the document body.\r\n * @param {string} event - The name of the event to listen for (e.g., 'click', 'keydown').\r\n * @param {EventListenerOrEventListenerObject} handlerFn - The event handler function.\r\n */\r\nexport const $on = function (event, handlerFn) {\r\n    document.addEventListener(event, handlerFn);\r\n};\r\n","import { generateClassName } from \"./helpers.js\";\r\n\r\n/**\r\n * @param {TemplateStringsArray | object} styles\r\n * @param {...any} values\r\n * @returns {string} HTMLElementClassName\r\n */\r\nexport const cssParser = (styles, ...values) => {\r\n    const className = generateClassName();\r\n    const styleSheet = document.styleSheets[0];\r\n\r\n    let cssString = \"\";\r\n\r\n    /** @type {Array<{selector: string, styles: object}>} */\r\n    let nestedCssRules = [];\r\n\r\n    /** @type {Array<{media: string, selector: string, styles: object}>} */\r\n    let mediaQueryRules = [];\r\n\r\n    /**\r\n     * @param {TemplateStringsArray | object} styles\r\n     * @param {any} selector\r\n     * @returns {string} Parsed CSS string\r\n     */\r\n    const parseStyles = (styles, selector) => {\r\n        let baseStyles = \"\";\r\n        Object.entries(styles).forEach(([key, value]) => {\r\n            if (typeof value === \"object\") {\r\n                if (key.startsWith(\"@\")) {\r\n                    // Handle media queries\r\n                    mediaQueryRules.push({\r\n                        media: key,\r\n                        selector,\r\n                        styles: value,\r\n                    });\r\n                } else if (key.startsWith(\"&:\")) {\r\n                    // Handle pseudo-classes like &:hover\r\n                    const pseudoClass = key.replace(\"&\", selector);\r\n                    nestedCssRules.push({\r\n                        selector: pseudoClass,\r\n                        styles: value,\r\n                    });\r\n                } else {\r\n                    // Handle nested selectors (like & > div)\r\n                    nestedCssRules.push({\r\n                        selector: `${selector} ${key}`,\r\n                        styles: value,\r\n                    });\r\n                }\r\n            } else {\r\n                // Handle basic styles\r\n                baseStyles += `${key.replace(/([A-Z])/g, \"-$1\").toLowerCase()}: ${value}; `;\r\n            }\r\n        });\r\n        return baseStyles;\r\n    };\r\n\r\n    // Handle the styles argument (either object or template literal)\r\n    if (typeof styles === \"object\" && !Array.isArray(styles)) {\r\n        cssString = parseStyles(styles, `.${className}`);\r\n    } else if (Array.isArray(styles)) {\r\n        cssString = styles.reduce((result, str, i) => {\r\n            return result + str + (values[i] || \"\");\r\n        }, \"\");\r\n    }\r\n\r\n    // Apply critical styles inline if in early loading phase\r\n    if (document.readyState === \"loading\" && cssString) {\r\n        document.head.insertAdjacentHTML(\r\n            \"beforeend\",\r\n            `<style>.${className} { ${cssString} }</style>`\r\n        );\r\n    } else if (cssString) {\r\n        styleSheet.insertRule(`.${className} { ${cssString} }`, styleSheet.cssRules.length);\r\n    }\r\n\r\n    // Insert nested CSS rules (like &:hover)\r\n    nestedCssRules.forEach(({ selector, styles }) => {\r\n        const nestedCssString = parseStyles(styles, selector);\r\n        if (nestedCssString) {\r\n            styleSheet.insertRule(\r\n                `${selector} { ${nestedCssString} }`,\r\n                styleSheet.cssRules.length\r\n            );\r\n        }\r\n    });\r\n\r\n    // Insert media query rules (like @media)\r\n    mediaQueryRules.forEach(({ media, selector, styles }) => {\r\n        const nestedCssString = parseStyles(styles, selector);\r\n        if (nestedCssString) {\r\n            styleSheet.insertRule(\r\n                `${media} { ${selector} { ${nestedCssString} } }`,\r\n                styleSheet.cssRules.length\r\n            );\r\n        }\r\n    });\r\n\r\n    return className;\r\n};\r\n","import { optionsApi } from \"./layouts.js\";\r\nimport { cssParser } from \"./parser.js\";\r\n\r\nconst eventHandlersMap = new Map();\r\n\r\ndocument.body.addEventListener(\"click\", (event) => {\r\n    // @ts-ignore\r\n    const targetId = event.target.id;\r\n\r\n    if (eventHandlersMap.has(targetId)) {\r\n        eventHandlersMap.get(targetId)();\r\n    }\r\n});\r\n\r\nexport class componentController {\r\n    constructor() {\r\n        /** @type {HTMLElement | null} */\r\n        this.element = null;\r\n\r\n        /** @type {Array<string>} */\r\n        this.elementClasses = [];\r\n\r\n        /** @type {Array<[string, Function]>} */\r\n        this.eventListeners = [];\r\n    }\r\n\r\n    /**\r\n     * Add a child element to this element.\r\n     * @param {componentController} child - The child component to add.\r\n     * @returns {this} - Returns the instance of the class for chaining.\r\n     */\r\n    addChild(child) {\r\n        if (child instanceof componentController && this.element) {\r\n            // @ts-ignore\r\n            this.element.appendChild(child.element);\r\n        } else {\r\n            console.error(\"Mounted Child Is Not A Rosana Component\");\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the alignment of child elements in the control.\r\n     * @param {string} options - Alignment options.\r\n     */\r\n    alignment(options) {\r\n        if (options) {\r\n            //@ts-ignore\r\n            optionsApi(this.element, options);\r\n        } else {\r\n            console.log(\"Alignment Options Undefined\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * batch dom api setters and getters effeciently\r\n     * @param {object} props\r\n     */\r\n    batch(props) {\r\n        Object.entries(props).forEach(([key, value]) => {\r\n            requestAnimationFrame(() => {\r\n                if (this.element) {\r\n                    // @ts-ignore\r\n                    this.element[key] = value;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add an onclick event listener to the element.\r\n     * @param {Function} handler - The event handler function.\r\n     */\r\n    set onclick(handler) {\r\n        eventHandlersMap.set(this.element?.id, handler);\r\n    }\r\n\r\n    /**\r\n     * Add css scoped styles to your element.\r\n     * @param {TemplateStringsArray | object} styles\r\n     * @returns {this}\r\n     */\r\n    css(styles) {\r\n        const className = cssParser(styles);\r\n        this.element?.classList.add(className);\r\n        this.elementClasses.push(className);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a child element from this element.\r\n     * @param {componentController} child - The child component to remove.\r\n     * @returns {this} - Returns the instance of the class for chaining.\r\n     */\r\n    destroyChild(child) {\r\n        if (child instanceof componentController) {\r\n            child.eventListeners.forEach(([event, Fn]) => {\r\n                // @ts-ignore\r\n                child.element?.removeEventListener(event, Fn);\r\n            });\r\n            child.element?.remove();\r\n        } else {\r\n            console.error(\"Child Is Not A Rosana Component\");\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the visibility of the element.\r\n     */\r\n    show() {\r\n        this.element?.classList.add(\"show\");\r\n    }\r\n\r\n    /**\r\n     * Hide the element\r\n     */\r\n    hide() {\r\n        this.element?.classList.add(\"hide\");\r\n    }\r\n\r\n    /**\r\n     * Sets the display and visibility of the element.\r\n     */\r\n    gone() {\r\n        this.element?.classList.add(\"gone\");\r\n    }\r\n}\r\n","import { componentController } from \"./control.js\";\r\nimport { cssParser } from \"./parser.js\";\r\nimport { generateId } from \"./helpers.js\";\r\n\r\nlet viewOptions = [\r\n    \"noscrollbar\",\r\n    \"scrollxy\",\r\n    \"scrollx\",\r\n    \"scrolly\",\r\n    \"top\",\r\n    \"bottom\",\r\n    \"left\",\r\n    \"right\",\r\n    \"horizontal\",\r\n    \"vertical\",\r\n    \"vcenter\",\r\n    \"center\",\r\n    \"fillxy\",\r\n    \"fillx\",\r\n    \"filly\",\r\n];\r\n\r\n/**\r\n * Applies the provided options to the given HTML element by adding corresponding CSS classes.\r\n * @param {HTMLElement} element - The target HTML element to apply the options to.\r\n * @param {string} options - A comma-separated string of options to apply to the element.\r\n */\r\nexport const optionsApi = (element, options) => {\r\n    options\r\n        .toLowerCase()\r\n        .replace(/\\s/g, \"\")\r\n        .split(\",\")\r\n        .forEach((option) => {\r\n            if (viewOptions.includes(option)) {\r\n                element.classList.add(option);\r\n            } else {\r\n                console.error(`Unknown option: ${option}`);\r\n            }\r\n        });\r\n};\r\n\r\n/**\r\n * Configures a layout element based on the specified layout type and options.\r\n * @param {HTMLElement} layout - The HTML element representing the layout.\r\n * @param {string} type - The layout type (e.g., \"linear\", \"absolute\", \"frame\", \"stack\").\r\n * @param {string} [options] - Optional string representing layout options (e.g., \"horizontal\", \"vertical\").\r\n */\r\n/**\r\n * Applies layout styles to the provided element based on the layout type and options.\r\n * @param {HTMLElement} layout - The target layout element.\r\n * @param {string} type - The layout type (e.g., \"linear\", \"absolute\", \"frame\", \"stack\").\r\n * @param {string} [options] - Additional layout options (e.g., \"vertical\").\r\n */\r\nfunction layoutFitApi(layout, type, options) {\r\n    if (options) optionsApi(layout, options);\r\n\r\n    const layoutTYPE = type.toLowerCase();\r\n\r\n    switch (layoutTYPE) {\r\n        case \"linear\":\r\n            layout.classList.add(\"layout-linear\");\r\n            break;\r\n        case \"absolute\":\r\n            layout.classList.add(\"layout-absolute\");\r\n            break;\r\n        case \"frame\":\r\n            layout.classList.add(\"layout-frame\");\r\n            break;\r\n        case \"stack\":\r\n            const directionClass = options?.includes(\"vertical\")\r\n                ? \"layout-stack-vertical\"\r\n                : \"layout-stack-horizontal\";\r\n            layout.classList.add(directionClass);\r\n            break;\r\n        default:\r\n            console.error(\"Unknown Layout\", layoutTYPE);\r\n    }\r\n}\r\n\r\n/**\r\n * Class representing a layout initializer, which creates and configures layout elements.\r\n * @extends componentController\r\n */\r\nconst $LayoutInitializer = class extends componentController {\r\n    /**\r\n     * Creates a new layout element with the specified type and options.\r\n     * @param {string} type - The layout type (e.g., \"linear\", \"absolute\", \"frame\", \"stack\").\r\n     * @param {string} [options] - Optional string representing layout options (e.g., \"horizontal\", \"vertical\").\r\n     */\r\n    constructor(type, options) {\r\n        super();\r\n        this.element = document.createElement(\"div\");\r\n        this.element.id = generateId();\r\n\r\n        this.type = `layout-${type}`;\r\n        type ? layoutFitApi(this.element, type, options) : null;\r\n    }\r\n};\r\n\r\n/**\r\n * Creates a linear layout with optional child alignment properties.\r\n * @param {string} [childAlignmentProperties] - Optional string for child alignment (e.g., \"top\", \"center\").\r\n * @returns {$LayoutInitializer} The created linear layout.\r\n */\r\nexport const $LinearLayout = function (childAlignmentProperties) {\r\n    return new $LayoutInitializer(\"linear\", childAlignmentProperties);\r\n};\r\n\r\n/**\r\n * Creates an absolute layout with optional child alignment properties.\r\n * @param {string} [childAlignmentProperties] - Optional string for child alignment (e.g., \"top\", \"center\").\r\n * @returns {$LayoutInitializer} The created absolute layout.\r\n */\r\nexport const $AbsoluteLayout = function (childAlignmentProperties) {\r\n    return new $LayoutInitializer(\"absolute\", childAlignmentProperties);\r\n};\r\n\r\n/**\r\n * Creates a frame layout with optional child alignment properties.\r\n * @param {string} [childAlignmentProperties] - Optional string for child alignment (e.g., \"top\", \"center\").\r\n * @returns {$LayoutInitializer} The created frame layout.\r\n */\r\nexport const $FrameLayout = function (childAlignmentProperties) {\r\n    return new $LayoutInitializer(\"frame\", childAlignmentProperties);\r\n};\r\n\r\n/**\r\n * Creates a stack layout, either horizontal or vertical, with optional child alignment properties.\r\n * @param {string} [stackOrientation=\"horizontal\"] - The orientation of the stack layout (either \"horizontal\" or \"vertical\").\r\n * @returns {$LayoutInitializer} The created stack layout.\r\n */\r\nexport const $StackedLayout = function (stackOrientation = \"horizontal\") {\r\n    return new $LayoutInitializer(\"stack\", stackOrientation);\r\n};\r\n","/**\r\n * signal Method allows you to use plain signals, it takes in plain values and gives reactivity.\r\n * @param {any} defaultValue\r\n */\r\nexport const $signal = function (defaultValue = null) {\r\n    let internal_variable = defaultValue;\r\n    let subscriptions = [];\r\n\r\n    /**\r\n     * notify the user\r\n     * @param {Function} fn\r\n     */\r\n    const notify = function (fn) {\r\n        for (let subscriber of subscriptions) {\r\n            subscriber(internal_variable);\r\n        }\r\n    };\r\n    return {\r\n        /**\r\n         * set the signal's value\r\n         * @param {any} val\r\n         */\r\n        set value(val) {\r\n            internal_variable = val;\r\n            notify();\r\n        },\r\n\r\n        /**\r\n         * returns the signals value\r\n         * @returns internal_variable\r\n         */\r\n        get value() {\r\n            return internal_variable;\r\n        },\r\n\r\n        /**\r\n         * subscribe to the signal\r\n         * @param {Function} fn\r\n         */\r\n        subscribe: (fn) => {\r\n            subscriptions.push(fn);\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * add a signal that takes in the defaultValue as an object\r\n * @param {Object} initialValue = {}\r\n */\r\nexport const $store = function (initialValue = {}) {\r\n    let state = { ...initialValue };\r\n    const listeners = new Set();\r\n\r\n    return {\r\n        /**\r\n         * set the signal's value\r\n         * @param {any} val\r\n         */\r\n        set(key, value) {\r\n            state[key] = value;\r\n            listeners.forEach((listener) => listener(state));\r\n        },\r\n\r\n        /**\r\n         * returns the signals value\r\n         * @returns internal_variable\r\n         */\r\n        get(key) {\r\n            return state[key];\r\n        },\r\n\r\n        /**\r\n         * subscribe to the signal\r\n         * @param {Function} fn\r\n         */\r\n        subscribe(listener) {\r\n            listeners.add(listener);\r\n            return () => listeners.delete(listener);\r\n        },\r\n    };\r\n};\r\n","import { componentController } from \"./control.js\";\r\nimport { $signal } from \"./signals.js\";\r\n\r\nconst defaultLanguage = navigator.language;\r\nconst defaultLangCode = defaultLanguage.split(\"-\")[0];\r\nlet translations = {};\r\n\r\n/**@type {any} */\r\nlet currentLang;\r\n\r\n/**\r\n * Loads the translations from a given JSON source and sets the default language.\r\n * @param {string} [defaultLang=defaultLangCode] - The default language code (e.g., 'en').\r\n * @param {string} jsonSource - The URL to the JSON file containing translation data.\r\n * @returns {Promise<void>} A promise that resolves when the translations are loaded.\r\n */\r\n// @ts-ignore\r\nexport const $localize = async function (defaultLang = defaultLangCode, jsonSource) {\r\n    currentLang = $signal(defaultLang);\r\n\r\n    const response = await fetch(jsonSource);\r\n    if (!response.ok) {\r\n        console.log(\"Translation File Not Loaded\");\r\n        return;\r\n    }\r\n\r\n    const loadedTranslations = await response.json();\r\n    translations = { ...translations, ...loadedTranslations };\r\n};\r\n\r\n/**\r\n * Sets the current language by updating the signal.\r\n * @param {string} langCode - The language code (e.g., 'en', 'fr').\r\n */\r\nexport const $setLanguage = function (langCode) {\r\n    currentLang.value = langCode;\r\n};\r\n\r\n/**\r\n * Returns the localized text for a given key, applying any provided placeholders.\r\n * @param {string} key - The key used to look up the translation.\r\n * @param {object} [placeholders] - An optional object of placeholders to replace in the translation.\r\n * @returns {string} The localized text, with placeholders replaced if provided.\r\n */\r\nlet $localizedText = function (key, placeholders) {\r\n    if (!currentLang || !currentLang.value) {\r\n        return key;\r\n    }\r\n\r\n    // @ts-ignore\r\n    const langData = translations[currentLang.value] || translations[defaultLangCode] || {};\r\n    let translation = langData[key] || key;\r\n    if (placeholders) {\r\n        Object.keys(placeholders).forEach((placeholder) => {\r\n            // @ts-ignore\r\n            translation = translation.replace(`{${placeholder}}`, placeholders[placeholder]);\r\n        });\r\n    }\r\n    return translation;\r\n};\r\n\r\n/**\r\n * Sets the text content of the component based on the current language, and updates it when the language changes.\r\n * @param {string} key - The key used to look up the translation.\r\n * @param {object} [placeholders] - An optional object of placeholders to replace in the translation.\r\n * @returns {Promise<void>} A promise that resolves when the localized text is set.\r\n */\r\n// @ts-ignore\r\ncomponentController.prototype.localizedText = async function (key, placeholders) {\r\n    if (!currentLang || !currentLang.value) {\r\n        // @ts-ignore\r\n        return key;\r\n    }\r\n\r\n    const localizedText = await $localizedText(key, placeholders);\r\n\r\n    // @ts-ignore\r\n    this.element.textContent = localizedText;\r\n\r\n    // Subscribe to language changes and update the text accordingly\r\n    currentLang.subscribe(async () => {\r\n        const localizedText = await $localizedText(key, placeholders);\r\n        // @ts-ignore\r\n        this.element.textContent = localizedText;\r\n    });\r\n};\r\n","/**\r\n * showIF method allows you to hide or show an element if the restingParameter is truthy\r\n * @param {Boolean} restingParameter\r\n * @param {instanceOf<$uiControl>} onTruthyElement\r\n * @param {instanceOf<$uiControl>} onFalseyElement\r\n */\r\nexport const $showIF = function (restingParameter, onTruthyElement, onFalseyElement) {\r\n    if (onTruthyElement === undefined || onFalseyElement === undefined) {\r\n        console.error(`showIF not called, one of the elements is undefined`);\r\n        return;\r\n    }\r\n    restingParameter ? onTruthyElement.show() : onTruthyElement.hide();\r\n    !restingParameter ? onFalseyElement.show() : onFalseyElement.hide();\r\n};\r\n\r\n/**\r\n * show a fallback view during an async operation, then swap it out when done.\r\n * @param {asyncFunction} resource\r\n * @param {instanceOf<$uiControl>} fallback\r\n * @param {instanceOf<$uiControl>} controlInSuspension\r\n */\r\nexport const $suspense = (resource, fallback, controlInSuspension) => {\r\n    const subscriptions = [];\r\n\r\n    const notify = () => subscriptions.forEach((subscriber) => subscriber());\r\n\r\n    if (fallback.type === \"Layout\" && controlInSuspension.type === \"Layout\") {\r\n        if (!controlInSuspension.hasChild(fallback)) {\r\n            console.error(`FallBack is not a child of ${controlInSuspension}`);\r\n            return;\r\n        }\r\n\r\n        ap.mount(fallback);\r\n\r\n        const showFallback = () => {\r\n            fallback.show();\r\n            controlInSuspension.hide();\r\n        };\r\n\r\n        const showSuspended = () => {\r\n            controlInSuspension.show();\r\n            fallback.hide();\r\n        };\r\n\r\n        showFallback();\r\n\r\n        Promise.resolve(resource())\r\n            .then(() => {\r\n                showSuspended();\r\n                notify();\r\n            })\r\n            .catch(() => showFallback());\r\n    } else {\r\n        console.error(\"suspense must be used with both containers as a layout\");\r\n    }\r\n    return {\r\n        /**\r\n         * call a function after the new view is added\r\n         * @param {Function} fn\r\n         */\r\n        effects: (fn) => subscriptions.push(fn),\r\n    };\r\n};\r\n","//@ts-nocheck\r\nimport \"./layouts.css\";\r\n/**\r\n * Creates and initializes the main application with a root component.\r\n * @param {Function} mainComponent - The main component function of the application.\r\n * @returns {Object} - The app instance with `mount` and `use` methods.\r\n */\r\nexport const $createApp = function (mainComponent) {\r\n    const app = {\r\n        _rootComponent: mainComponent,\r\n        _plugins: [],\r\n\r\n        /**\r\n         * Mounts the main component to a DOM element identified by the selector.\r\n         * @param {string} selector - A CSS selector for the container to mount the component.\r\n         * @returns {Object} - The app instance for method chaining.\r\n         */\r\n        mount: function (selector) {\r\n            const container = document.querySelector(selector);\r\n            if (!container) {\r\n                console.error(`No element found for selector \"${selector}\"`);\r\n                return this; // Ensure the method still returns the app instance for chaining.\r\n            }\r\n\r\n            document.body.style.margin = \"0\";\r\n            document.body.style.width = \"100%\";\r\n\r\n            container.innerHTML = \"\";\r\n            const instance = this._rootComponent;\r\n\r\n            // Ensure the instance has an 'element' property before appending.\r\n            if (instance && instance.element) {\r\n                container.appendChild(instance.element);\r\n            } else {\r\n                console.error(\"Main component does not have an element property.\");\r\n            }\r\n\r\n            // Initialize router if it's been added as a plugin\r\n            if (this.router) {\r\n                this.router.init();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds a plugin to the application.\r\n         * @param {Object} plugin - The plugin object to add, expected to have an install function.\r\n         * @returns {Object} - The app instance for method chaining.\r\n         */\r\n        use: function (plugin) {\r\n            if (plugin && typeof plugin.install === \"function\") {\r\n                plugin.install(this);\r\n                this._plugins.push(plugin);\r\n            } else {\r\n                console.warn(\"Plugin is missing install method:\", plugin);\r\n            }\r\n            return this;\r\n        },\r\n    };\r\n\r\n    return app;\r\n};\r\n","//@ts-nocheck\r\n/**\r\n * A secure router with route guards, 404 handling, lazy loading, and nested routes support.\r\n */\r\nclass $router {\r\n    /**\r\n     * Initialize router with routes and listeners.\r\n     * @param {Array<Object>} routes\r\n     */\r\n    constructor(routes) {\r\n        this.guards = [];\r\n        this.params = null;\r\n        this.routes = routes;\r\n        this.notFound = null;\r\n        this.currentRoute = null;\r\n\r\n        // Listen for back/forward navigation\r\n        window.addEventListener(\"popstate\", () => this._handleRouteChange());\r\n    }\r\n\r\n    /**\r\n     * Attach the router to the app.\r\n     * @param {any} app\r\n     */\r\n    install(app) {\r\n        app.router = this;\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * Add route guard to validate route changes.\r\n     * @param {Function} guardFn - Function returning a boolean or promise.\r\n     */\r\n    addGuard(guardFn) {\r\n        this.guards.push(guardFn);\r\n    }\r\n\r\n    /**\r\n     * Set a component for 404 (not found) pages.\r\n     * @param {Function} component\r\n     */\r\n    setNotFound(component) {\r\n        this.notFound = component;\r\n    }\r\n\r\n    /**\r\n     * Define a new route, supporting nested routes.\r\n     * @param {string} path - Path of the route.\r\n     * @param {Function|Promise} component - Component or function for lazy loading.\r\n     * @param {Object} [options] - Additional route options.\r\n     */\r\n    add(path, component, options = {}) {\r\n        this.routes.push({ path, component, options });\r\n    }\r\n\r\n    /**\r\n     * Register a callback to trigger on route load.\r\n     * @param {string} route - Route path.\r\n     * @param {Function} fn - Callback function.\r\n     */\r\n    on(route, fn) {\r\n        const matchedRoute = this.routes.find((r) => r.path === route);\r\n        if (matchedRoute) matchedRoute.onLoad = fn;\r\n    }\r\n\r\n    /**\r\n     * Navigate to a specified route.\r\n     * @param {string} path\r\n     */\r\n    navigate(path, params = {}) {\r\n        const fullPath = path.replace(/:([\\w]+)/g, (_, key) => {\r\n            if (params[key] === undefined) {\r\n                console.error(`Parameter \"${key}\" not provided for path: ${path}`);\r\n                return `:${key}`;\r\n            }\r\n            return params[key];\r\n        });\r\n\r\n        history.pushState(null, \"\", fullPath);\r\n        this._handleRouteChange();\r\n    }\r\n\r\n    /**\r\n     * Initialize the router by handling the initial route.\r\n     */\r\n    init() {\r\n        this._handleRouteChange();\r\n    }\r\n\r\n    /**\r\n     * Handle route changes and apply guards.\r\n     */\r\n    async _handleRouteChange() {\r\n        const path = window.location.pathname;\r\n        const matchedRoute = this._matchRoute(path, this.routes);\r\n\r\n        if (matchedRoute) {\r\n            this.params = matchedRoute.params;\r\n\r\n            for (const guard of this.guards) {\r\n                if (!(await guard(matchedRoute))) {\r\n                    console.warn(\"Navigation cancelled by guard.\");\r\n                    return;\r\n                }\r\n            }\r\n\r\n            this.currentRoute = matchedRoute;\r\n            await this._loadComponent(matchedRoute);\r\n        } else if (this.notFound) {\r\n            await this._loadComponent({ component: this.notFound });\r\n        } else {\r\n            console.error(`Route not found for path: ${path}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Match a route with dynamic parameters, including nested routes.\r\n     * @param {string} path\r\n     * @param {Array<Object>} routes - List of routes to match.\r\n     * @returns {Object|null} - Matched route with parameters and nested route data.\r\n     */\r\n    _matchRoute(path, routes) {\r\n        for (const route of routes) {\r\n            const { regex, keys } = this._pathToRegex(route.path);\r\n            const match = path.match(regex);\r\n\r\n            if (match) {\r\n                const params = keys.reduce((acc, key, index) => {\r\n                    acc[key] = match[index + 1];\r\n                    return acc;\r\n                }, {});\r\n\r\n                // Recursively match nested routes, if available\r\n                if (route.children) {\r\n                    const nestedRoute = this._matchRoute(path.replace(regex, \"\"), route.children);\r\n                    if (nestedRoute) {\r\n                        return { ...route, params, nested: nestedRoute };\r\n                    }\r\n                }\r\n\r\n                return { ...route, params };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Convert route path to a regular expression with dynamic parameters.\r\n     * @param {string} path\r\n     * @returns {Object} - Regular expression and keys.\r\n     */\r\n    _pathToRegex(path) {\r\n        const keys = [];\r\n        const regexString = path\r\n            .replace(/:([\\w]+)/g, (_, key) => {\r\n                keys.push(key);\r\n                return \"([^\\\\/]+)\";\r\n            })\r\n            .replace(/\\//g, \"\\\\/\");\r\n        return { regex: new RegExp(`^${regexString}$`), keys };\r\n    }\r\n\r\n    /**\r\n     * Load a route component, supporting lazy loading and nested routes.\r\n     * @param {Object} route - Route to load.\r\n     */\r\n    async _loadComponent(route) {\r\n        let component = route.component;\r\n\r\n        if (typeof component === \"function\") {\r\n            const module = await component();\r\n            component = module.default;\r\n        }\r\n\r\n        if (component && typeof route.onLoad === \"function\") {\r\n            route.onLoad(component);\r\n        } else if (component) {\r\n            const container = document.querySelector(\"#app\");\r\n            container.innerHTML = \"\";\r\n            const instance = component;\r\n\r\n            if (instance && instance.element) {\r\n                container.appendChild(instance.element);\r\n\r\n                // Pass params to the component if routingInfo is defined\r\n                if (typeof instance.routingInfo === \"function\") {\r\n                    instance.routingInfo(this.params);\r\n                }\r\n\r\n                // Load nested route component, if present\r\n                if (route.nested) {\r\n                    await this._loadComponent(route.nested);\r\n                }\r\n            } else {\r\n                console.error(\r\n                    `Imported Route Is Not A Rosana Component, Has No Rosana Layout : \\n{instance}`\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Navigate back in history.\r\n     */\r\n    back() {\r\n        history.back();\r\n    }\r\n\r\n    /**\r\n     * Navigate forward in history.\r\n     */\r\n    forward() {\r\n        history.forward();\r\n    }\r\n}\r\n\r\nexport { $router };\r\n","import { componentController } from \"./control.js\";\r\nimport { generateId } from \"./helpers.js\";\r\n\r\n/** @typedef {string} HtmlTag */\r\n\r\n/**\r\n * Initializes an HTML element with specified properties and attaches it to a parent component.\r\n * @class\r\n * @extends componentController\r\n */\r\nexport const $Element = class extends componentController {\r\n    /**\r\n     * Creates an HTML element.\r\n     * @param {HtmlTag} tag - The HTML tag name to create (e.g., 'div', 'span').\r\n     * @param {componentController} parent - The parent component to attach to\r\n     */\r\n    constructor(tag, parent) {\r\n        super();\r\n\r\n        this.type = tag.toLocaleUpperCase();\r\n        this.parent = parent;\r\n\r\n        this.element = document.createElement(tag);\r\n        this.element.id = generateId();\r\n\r\n        if (parent instanceof componentController) {\r\n            parent.addChild(this);\r\n        } else {\r\n            console.error(\"No Parent For Component To Attach To.\");\r\n            return;\r\n        }\r\n    }\r\n};\r\n","import { componentController } from \"./control.js\";\r\nimport { $Element } from \"./elements.js\";\r\nexport const $Html = Object();\r\n\r\n/**\r\n * Creates a paragraph (`<p>`) element.\r\n * @function\r\n * @param {componentController} parent\r\n */\r\n\r\n$Html.P = (parent) => {\r\n    return new $Element(\"p\", parent);\r\n};\r\n\r\n/**\r\n * Creates a division (`<div>`) element.\r\n * @function\r\n * @param {componentController} parent\r\n */\r\n\r\n$Html.Div = (parent) => {\r\n    return new $Element(\"div\", parent);\r\n};\r\n\r\n/**\r\n * Creates a span (`<span>`) element.\r\n * @function\r\n * @param {componentController} parent\r\n */\r\n\r\n$Html.Span = (parent) => {\r\n    return new $Element(\"span\", parent);\r\n};\r\n\r\n/**\r\n * Creates an image (`<img>`) element.\r\n * @function\r\n * @param {componentController} parent\r\n */\r\n\r\n$Html.Image = (parent) => {\r\n    return new $Element(\"img\", parent);\r\n};\r\n\r\n/**\r\n * Creates a button (`<button>`) element.\r\n * @function\r\n * @param {componentController} parent\r\n */\r\n\r\n$Html.Button = (parent) => {\r\n    return new $Element(\"button\", parent);\r\n};\r\n\r\n/**\r\n * Creates an input (`<input>`) element.\r\n * @function\r\n * @param {componentController} parent\r\n */\r\n\r\n$Html.Input = (parent) => {\r\n    return new $Element(\"input\", parent);\r\n};\r\n\r\n/**\r\n * Creates an unordered list (`<ul>`) element.\r\n * @function\r\n * @param {componentController} parent\r\n */\r\n\r\n$Html.Ul = (parent) => {\r\n    return new $Element(\"ul\", parent);\r\n};\r\n\r\n/**\r\n * Creates a list item (`<li>`) element.\r\n * @function\r\n * @param {componentController} parent\r\n */\r\n\r\n$Html.Li = (parent) => {\r\n    return new $Element(\"li\", parent);\r\n};\r\n\r\n/**\r\n * Creates a heading (`<h1>`) element.\r\n * @function\r\n * @param {componentController} parent\r\n */\r\n\r\n$Html.H1 = (parent) => {\r\n    return new $Element(\"h1\", parent);\r\n};\r\n\r\n/**\r\n * Creates a heading (`<h2>`) element.\r\n * @function\r\n * @param {componentController} parent\r\n */\r\n\r\n$Html.H2 = (parent) => {\r\n    return new $Element(\"h2\", parent);\r\n};\r\n\r\n/**\r\n * Creates an anchor (`<a>`) element.\r\n * @function\r\n * @param {componentController} parent\r\n * @param {componentController} parent\r\n */\r\n\r\n$Html.A = (parent) => {\r\n    return new $Element(\"a\", parent);\r\n};\r\n\r\n/**\r\n * Creates a form (`<form>`) element.\r\n * @function\r\n * @param {componentController} parent\r\n */\r\n\r\n$Html.Form = (parent) => {\r\n    return new $Element(\"form\", parent);\r\n};\r\n"],"names":["styles","_a","module"],"mappings":"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"}