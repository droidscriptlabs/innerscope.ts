{"version":3,"file":"rosana.cjs.js","sources":["../.src/helpers.js","../.src/parser.js","../.src/control.js","../.src/layouts.js","../.src/+rosana.core.js","../.src/signals.js","../.src/localize.js","../.src/suspense.js","../.src/router.js","../.src/elements.js"],"sourcesContent":["var idCount = 0,\r\n    classnameCount = 0;\r\n\r\n/**\r\n * generate a unique id.\r\n * @returns HTMLELementId\r\n */\r\nexport const generateId = function () {\r\n    return `rosana-id-${idCount++}`;\r\n};\r\n\r\n/**\r\n * generate a unique classname\r\n * @returns HTMLElementClassName\r\n */\r\nexport const generateClassName = function () {\r\n    return `rosana-class-${classnameCount++}`;\r\n};\r\n","import { generateClassName } from \"./helpers.js\";\r\n\r\n/**\r\n * @param {TemplateStringsArray | object} styles\r\n * @param {...any} values\r\n * @returns {string} HTMLElementClassName\r\n */\r\nexport const cssParser = (styles, ...values) => {\r\n    const className = generateClassName();\r\n    const styleSheet = document.styleSheets[0];\r\n\r\n    let cssString = \"\";\r\n\r\n    /** @type {Array<{selector: string, styles: object}>} */\r\n    let nestedCssRules = [];\r\n\r\n    /** @type {Array<{media: string, selector: string, styles: object}>} */\r\n    let mediaQueryRules = [];\r\n\r\n    /**\r\n     * @param {TemplateStringsArray | object} styles\r\n     * @param {any} selector\r\n     * @returns\r\n     */\r\n    const parseStyles = (styles, selector) => {\r\n        let baseStyles = \"\";\r\n        Object.entries(styles).forEach(([key, value]) => {\r\n            if (typeof value === \"object\") {\r\n                if (key.startsWith(\"@\")) {\r\n                    // Handle media queries\r\n                    mediaQueryRules.push({\r\n                        media: key,\r\n                        selector,\r\n                        styles: value,\r\n                    });\r\n                } else if (key.startsWith(\"&:\")) {\r\n                    // Handle pseudo-classes like &:hover\r\n                    const pseudoClass = key.replace(\"&\", selector);\r\n                    nestedCssRules.push({\r\n                        selector: pseudoClass,\r\n                        styles: value,\r\n                    });\r\n                } else {\r\n                    // Handle nested selectors (like & > div)\r\n                    nestedCssRules.push({\r\n                        selector: `${selector} ${key}`,\r\n                        styles: value,\r\n                    });\r\n                }\r\n            } else {\r\n                // Handle basic styles\r\n                baseStyles += `${key.replace(/([A-Z])/g, \"-$1\").toLowerCase()}: ${value}; `;\r\n            }\r\n        });\r\n        return baseStyles;\r\n    };\r\n\r\n    // Handle the styles argument (either object or template literal)\r\n    if (typeof styles === \"object\" && !Array.isArray(styles)) {\r\n        // Object notation: parse styles\r\n        cssString = parseStyles(styles, `.${className}`);\r\n    } else if (Array.isArray(styles)) {\r\n        // Template literal: combine static and dynamic values into CSS\r\n        cssString = styles.reduce((result, str, i) => {\r\n            return result + str + (values[i] || \"\");\r\n        }, \"\");\r\n    }\r\n\r\n    // Insert base class CSS rule\r\n    if (cssString) {\r\n        styleSheet.insertRule(`.${className} { ${cssString} }`, styleSheet.cssRules.length);\r\n    }\r\n\r\n    // Insert nested CSS rules (like &:hover)\r\n    nestedCssRules.forEach(({ selector, styles }) => {\r\n        const nestedCssString = parseStyles(styles, selector);\r\n        if (nestedCssString) {\r\n            styleSheet.insertRule(\r\n                `${selector} { ${nestedCssString} }`,\r\n                styleSheet.cssRules.length\r\n            );\r\n        }\r\n    });\r\n\r\n    // Insert media query rules (like @media)\r\n    mediaQueryRules.forEach(({ media, selector, styles }) => {\r\n        const nestedCssString = parseStyles(styles, selector);\r\n        if (nestedCssString) {\r\n            styleSheet.insertRule(\r\n                `${media} { ${selector} { ${nestedCssString} } }`,\r\n                styleSheet.cssRules.length\r\n            );\r\n        }\r\n    });\r\n\r\n    return className;\r\n};\r\n","import { optionsApi } from \"./layouts.js\";\r\nimport { cssParser } from \"./parser.js\";\r\n\r\nexport class componentController {\r\n    constructor() {\r\n        /** @type {HTMLElement | null} */\r\n        this.element = null;\r\n\r\n        /** @type {Array<string>} */\r\n        this.elementClasses = [];\r\n\r\n        /** @type {Array<[string, Function]>} */\r\n        this.eventListeners = [];\r\n    }\r\n\r\n    /**\r\n     * Add a child element to this element.\r\n     * @param {componentController} child - The child component to add.\r\n     * @returns {this} - Returns the instance of the class for chaining.\r\n     */\r\n    addChild(child) {\r\n        if (child instanceof componentController && this.element) {\r\n            this.element.appendChild(child.element);\r\n        } else {\r\n            console.error(\"Mounted Child Is Not A Rosana Component\");\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the alignment of child elements in the control.\r\n     * @param {string} options - Alignment options.\r\n     */\r\n    alignment(options) {\r\n        if (options) {\r\n            optionsApi(this.element, options);\r\n        } else {\r\n            console.log(\"Alignment Options Undefined\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * batch dom api setters and getters effeciently\r\n     * @param {object} props\r\n     * @returns this\r\n     */\r\n    batch(props) {\r\n        Object.entries(props).forEach(([key, value]) => {\r\n            requestAnimationFrame(() => {\r\n                if (this.element) {\r\n                    this.element[key] = value;\r\n                }\r\n            });\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add an event listener to the element.\r\n     * @param {string} event - The event type.\r\n     * @param {Function} handler - The event handler function.\r\n     * @returns {this} - Returns the instance of the class for chaining.\r\n     */\r\n    on(event, handler) {\r\n        this.element?.addEventListener(event, handler);\r\n        this.eventListeners.push([event, handler]);\r\n        return this;\r\n    }\r\n\r\n    css(styles) {\r\n        const className = cssParser(styles);\r\n        this.element?.classList.add(className);\r\n        this.elementClasses.push(className);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a child element from this element.\r\n     * @param {instanceOf<componentController>} child - The child component to remove.\r\n     * @returns {this} - Returns the instance of the class for chaining.\r\n     */\r\n    destroyChild(child) {\r\n        if (child instanceof componentController) {\r\n            child.eventListeners.forEach(([event, Fn]) => {\r\n                child.element?.removeEventListener(event, Fn);\r\n            });\r\n            child.element?.remove();\r\n        } else {\r\n            console.error(\"Child Is Not A Rosana Component\");\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the visibility of the element.\r\n     */\r\n    show() {\r\n        this.css({ visibility: \"visible\" });\r\n    }\r\n\r\n    /**\r\n     * Hide the element\r\n     */\r\n    hide() {\r\n        this.css({ visibility: \"hidden\" });\r\n    }\r\n\r\n    /**\r\n     * Sets the display and visibility of the element.\r\n     */\r\n    gone() {\r\n        this.css({\r\n            display: \"none !important\",\r\n            visibility: \"hidden\",\r\n        });\r\n    }\r\n}\r\n","import { componentController } from \"./control.js\";\r\nimport { cssParser } from \"./parser.js\";\r\nimport { generateId } from \"./helpers.js\";\r\n\r\nlet viewOptions = [\r\n    \"noscrollbar\",\r\n    \"scrollxy\",\r\n    \"scrollx\",\r\n    \"scrolly\",\r\n    \"top\",\r\n    \"bottom\",\r\n    \"left\",\r\n    \"right\",\r\n    \"horizontal\",\r\n    \"vertical\",\r\n    \"vcenter\",\r\n    \"center\",\r\n    \"fillxy\",\r\n    \"fillx\",\r\n    \"filly\",\r\n];\r\n\r\n/**\r\n * Applies the provided options to the given HTML element by adding corresponding CSS classes.\r\n * @param {HTMLElement} element - The target HTML element to apply the options to.\r\n * @param {string} options - A comma-separated string of options to apply to the element.\r\n */\r\nexport const optionsApi = (element, options) => {\r\n    const functions = {\r\n        noscrollbar: () => {\r\n            element.classList.add(\"noscrollbar\");\r\n        },\r\n        fillxy: () => {\r\n            let className = cssParser({\r\n                width: \"100%\",\r\n                height: window.innerHeight + \"px\",\r\n            });\r\n            element.classList.add(className);\r\n        },\r\n        fillx: () => {\r\n            let className = cssParser({\r\n                width: \"100%\",\r\n            });\r\n            element.classList.add(className);\r\n        },\r\n        filly: () => {\r\n            let className = cssParser({\r\n                height: window.innerHeight + \"px\",\r\n            });\r\n            element.classList.add(className);\r\n        },\r\n        scrollxy: () => {\r\n            let className = cssParser({\r\n                overflow: \"auto\",\r\n            });\r\n            element.classList.add(className);\r\n        },\r\n        scrollx: () => {\r\n            let className = cssParser({\r\n                overflowX: \"auto\",\r\n            });\r\n            element.classList.add(className);\r\n        },\r\n        scrolly: () => {\r\n            let className = cssParser({\r\n                overflowY: \"auto\",\r\n            });\r\n            element.classList.add(className);\r\n        },\r\n        left: () => {\r\n            let className = cssParser({\r\n                display: \"flex\",\r\n                justifyContent: \"flex-start\",\r\n            });\r\n            element.classList.add(className);\r\n        },\r\n        right: () => {\r\n            let className = cssParser({\r\n                display: \"flex\",\r\n                justifyContent: \"flex-end\",\r\n            });\r\n            element.classList.add(className);\r\n        },\r\n        center: () => {\r\n            let className = cssParser({\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n            });\r\n            element.classList.add(className);\r\n        },\r\n        vcenter: () => {\r\n            let className = cssParser({\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n            });\r\n            element.classList.add(className);\r\n        },\r\n        bottom: () => {\r\n            let className = cssParser({\r\n                display: \"flex\",\r\n                alignItems: \"flex-end\",\r\n            });\r\n            element.classList.add(className);\r\n        },\r\n        top: () => {\r\n            let className = cssParser({\r\n                display: \"flex\",\r\n                alignItems: \"flex-start\",\r\n            });\r\n            element.classList.add(className);\r\n        },\r\n        horizontal: () => {\r\n            let className = cssParser({\r\n                display: \"flex\",\r\n                flexDirection: \"row !important\",\r\n            });\r\n            element.classList.add(className);\r\n        },\r\n        vertical: () => {\r\n            let className = cssParser({\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n            });\r\n            element.classList.add(className);\r\n        },\r\n    };\r\n\r\n    options\r\n        .toLowerCase()\r\n        .replace(/\\s/g, \"\")\r\n        .split(\",\")\r\n        .forEach((el) => {\r\n            if (viewOptions.includes(el)) {\r\n                // @ts-ignore\r\n                functions[el]();\r\n            } else {\r\n                console.error(`Unknown option: ${el}`);\r\n            }\r\n        });\r\n};\r\n\r\n/**\r\n * Configures a layout element based on the specified layout type and options.\r\n * @param {HTMLElement} layout - The HTML element representing the layout.\r\n * @param {string} type - The layout type (e.g., \"linear\", \"absolute\", \"frame\", \"stack\").\r\n * @param {string} [options] - Optional string representing layout options (e.g., \"horizontal\", \"vertical\").\r\n */\r\nfunction layoutFitApi(layout, type, options) {\r\n    options ? optionsApi(layout, options) : null;\r\n    let layoutTYPE = type.toLowerCase();\r\n\r\n    if (layoutTYPE == \"linear\") {\r\n        let className = cssParser({\r\n            display: \"inline-flex\",\r\n            position: \"relative !important\",\r\n            flexDirection: \"column !important\",\r\n        });\r\n        layout.classList.add(className);\r\n    } else if (layoutTYPE == \"absolute\") {\r\n        let className = cssParser({\r\n            display: \"flex\",\r\n        });\r\n        layout.classList.add(className);\r\n    } else if (layoutTYPE === \"frame\") {\r\n        layout.style.position = \"relative\";\r\n    } else if (layoutTYPE === \"stack\") {\r\n        let className = cssParser({\r\n            display: \"flex\",\r\n            // @ts-ignore\r\n            flexDirection: options.includes(\"vertical\") ? \"column\" : \"row\",\r\n        });\r\n        layout.classList.add(className);\r\n    } else {\r\n        console.error(\"Unknown Layout \", layout);\r\n    }\r\n}\r\n\r\n/**\r\n * Class representing a layout initializer, which creates and configures layout elements.\r\n * @extends componentController\r\n */\r\nconst $LayoutInitializer = class extends componentController {\r\n    /**\r\n     * Creates a new layout element with the specified type and options.\r\n     * @param {string} type - The layout type (e.g., \"linear\", \"absolute\", \"frame\", \"stack\").\r\n     * @param {string} [options] - Optional string representing layout options (e.g., \"horizontal\", \"vertical\").\r\n     */\r\n    constructor(type, options) {\r\n        super();\r\n        this.element = document.createElement(\"div\");\r\n        this.element.id = generateId();\r\n        // @ts-ignore\r\n        this.element.type = \"Layout\";\r\n        type ? layoutFitApi(this.element, type, options) : null;\r\n    }\r\n};\r\n\r\n/**\r\n * Creates a linear layout with optional child alignment properties.\r\n * @param {string} [childAlignmentProperties] - Optional string for child alignment (e.g., \"top\", \"center\").\r\n * @returns {$LayoutInitializer} The created linear layout.\r\n */\r\nexport const $LinearLayout = function (childAlignmentProperties) {\r\n    return new $LayoutInitializer(\"linear\", childAlignmentProperties);\r\n};\r\n\r\n/**\r\n * Creates an absolute layout with optional child alignment properties.\r\n * @param {string} [childAlignmentProperties] - Optional string for child alignment (e.g., \"top\", \"center\").\r\n * @returns {$LayoutInitializer} The created absolute layout.\r\n */\r\nexport const $AbsoluteLayout = function (childAlignmentProperties) {\r\n    return new $LayoutInitializer(\"absolute\", childAlignmentProperties);\r\n};\r\n\r\n/**\r\n * Creates a frame layout with optional child alignment properties.\r\n * @param {string} [childAlignmentProperties] - Optional string for child alignment (e.g., \"top\", \"center\").\r\n * @returns {$LayoutInitializer} The created frame layout.\r\n */\r\nexport const $FrameLayout = function (childAlignmentProperties) {\r\n    return new $LayoutInitializer(\"frame\", childAlignmentProperties);\r\n};\r\n\r\n/**\r\n * Creates a stack layout, either horizontal or vertical, with optional child alignment properties.\r\n * @param {string} [stackOrientation=\"horizontal\"] - The orientation of the stack layout (either \"horizontal\" or \"vertical\").\r\n * @returns {$LayoutInitializer} The created stack layout.\r\n */\r\nexport const $StackedLayout = function (stackOrientation = \"horizontal\") {\r\n    return new $LayoutInitializer(\"stack\", stackOrientation);\r\n};\r\n","/**\r\n * Returns the system device theme; works in a browser environment.\r\n * @typedef {\"dark\" | \"light\"} SystemTheme\r\n * @returns {SystemTheme} - The system's color scheme, either \"dark\" or \"light\".\r\n */\r\nexport const $pageTheme = function () {\r\n    const darkThemeMq = window.matchMedia(\"(prefers-color-scheme: dark)\");\r\n    return darkThemeMq.matches ? \"dark\" : \"light\";\r\n};\r\n\r\n/**\r\n * Attaches an event listener to the document body.\r\n * @param {string} event - The name of the event to listen for (e.g., 'click', 'keydown').\r\n * @param {EventListenerOrEventListenerObject} handlerFn - The event handler function.\r\n */\r\nexport const $on = function (event, handlerFn) {\r\n    document.addEventListener(event, handlerFn);\r\n};\r\n\r\n/**\r\n * Creates and initializes the main application with a root component.\r\n * @param {Function} mainComponent - The main component function of the application.\r\n * @returns {Object} - The app instance with `mount` and `use` methods.\r\n */\r\nexport const $createApp = function (mainComponent) {\r\n    const app = {\r\n        _rootComponent: mainComponent,\r\n        _plugins: [],\r\n\r\n        /**\r\n         * Mounts the main component to a DOM element identified by the selector.\r\n         * @param {string} selector - A CSS selector for the container to mount the component.\r\n         * @returns {Object} - The app instance for method chaining.\r\n         */\r\n        mount: function (selector) {\r\n            const container = document.querySelector(selector);\r\n            if (!container) {\r\n                console.error(`No element found for selector \"${selector}\"`);\r\n                return this; // Ensure the method still returns the app instance for chaining.\r\n            }\r\n\r\n            document.body.style.margin = \"0\";\r\n            document.body.style.width = \"100%\";\r\n\r\n            container.innerHTML = \"\";\r\n            const instance = this._rootComponent;\r\n\r\n            // Ensure the instance has an 'element' property before appending.\r\n            // @ts-ignore\r\n            if (instance && instance.element) {\r\n                // @ts-ignore\r\n                container.appendChild(instance.element);\r\n            } else {\r\n                console.error(\"Main component does not have an element property.\");\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds a plugin to the application.\r\n         * @param {Object} plugin - The plugin object to add, expected to have an _install function.\r\n         * @returns {Object} - The app instance for method chaining.\r\n         */\r\n        use: function (plugin) {\r\n            // @ts-ignore\r\n            if (plugin && typeof plugin._install === \"function\") {\r\n                // @ts-ignore\r\n                plugin._install(this);\r\n                // @ts-ignore\r\n                this._plugins.push(plugin);\r\n            } else {\r\n                console.warn(\"Plugin is missing _install method:\", plugin);\r\n            }\r\n            return this;\r\n        },\r\n    };\r\n    return app;\r\n};\r\n","/**\r\n * signal Method allows you to use plain signals, it takes in plain values and gives reactivity.\r\n * @param {any} defaultValue\r\n */\r\nexport const $signal = function (defaultValue = null) {\r\n    let internal_variable = defaultValue;\r\n    let subscriptions = [];\r\n\r\n    /**\r\n     * notify the user\r\n     * @param {Function} fn\r\n     */\r\n    const notify = function (fn) {\r\n        for (let subscriber of subscriptions) {\r\n            subscriber(internal_variable);\r\n        }\r\n    };\r\n    return {\r\n        /**\r\n         * set the signal's value\r\n         * @param {any} val\r\n         */\r\n        set value(val) {\r\n            internal_variable = val;\r\n            notify();\r\n        },\r\n\r\n        /**\r\n         * returns the signals value\r\n         * @returns internal_variable\r\n         */\r\n        get value() {\r\n            return internal_variable;\r\n        },\r\n\r\n        /**\r\n         * subscribe to the signal\r\n         * @param {Function} fn\r\n         */\r\n        subscribe: (fn) => {\r\n            subscriptions.push(fn);\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * add a signal that takes in the defaultValue as an object\r\n * @param {Object} initialValue = {}\r\n */\r\nexport const $store = function (initialValue = {}) {\r\n    let state = { ...initialValue };\r\n    const listeners = new Set();\r\n\r\n    return {\r\n        /**\r\n         * set the signal's value\r\n         * @param {any} val\r\n         */\r\n        set(key, value) {\r\n            state[key] = value;\r\n            listeners.forEach((listener) => listener(state));\r\n        },\r\n\r\n        /**\r\n         * returns the signals value\r\n         * @returns internal_variable\r\n         */\r\n        get(key) {\r\n            return state[key];\r\n        },\r\n\r\n        /**\r\n         * subscribe to the signal\r\n         * @param {Function} fn\r\n         */\r\n        subscribe(listener) {\r\n            listeners.add(listener);\r\n            return () => listeners.delete(listener);\r\n        },\r\n    };\r\n};\r\n","import { componentController } from \"./control.js\";\r\nimport { $signal } from \"./signals.js\";\r\n\r\nconst defaultLanguage = navigator.language;\r\nconst defaultLangCode = defaultLanguage.split(\"-\")[0];\r\nlet translations = {};\r\n\r\n/**@type {any} */\r\nlet currentLang;\r\n\r\n/**\r\n * Loads the translations from a given JSON source and sets the default language.\r\n * @param {string} [defaultLang=defaultLangCode] - The default language code (e.g., 'en').\r\n * @param {string} jsonSource - The URL to the JSON file containing translation data.\r\n * @returns {Promise<void>} A promise that resolves when the translations are loaded.\r\n */\r\n// @ts-ignore\r\nexport const $localize = async function (defaultLang = defaultLangCode, jsonSource) {\r\n    currentLang = $signal(defaultLang);\r\n\r\n    const response = await fetch(jsonSource);\r\n    if (!response.ok) {\r\n        console.log(\"Translation File Not Loaded\");\r\n        return;\r\n    }\r\n\r\n    const loadedTranslations = await response.json();\r\n    translations = { ...translations, ...loadedTranslations };\r\n};\r\n\r\n/**\r\n * Sets the current language by updating the signal.\r\n * @param {string} langCode - The language code (e.g., 'en', 'fr').\r\n */\r\nexport const $setLanguage = function (langCode) {\r\n    currentLang.value = langCode;\r\n};\r\n\r\n/**\r\n * Returns the localized text for a given key, applying any provided placeholders.\r\n * @param {string} key - The key used to look up the translation.\r\n * @param {object} [placeholders] - An optional object of placeholders to replace in the translation.\r\n * @returns {string} The localized text, with placeholders replaced if provided.\r\n */\r\nlet $localizedText = function (key, placeholders) {\r\n    if (!currentLang || !currentLang.value) {\r\n        return key;\r\n    }\r\n\r\n    // @ts-ignore\r\n    const langData = translations[currentLang.value] || translations[defaultLangCode] || {};\r\n    let translation = langData[key] || key;\r\n    if (placeholders) {\r\n        Object.keys(placeholders).forEach((placeholder) => {\r\n            // @ts-ignore\r\n            translation = translation.replace(`{${placeholder}}`, placeholders[placeholder]);\r\n        });\r\n    }\r\n    return translation;\r\n};\r\n\r\n/**\r\n * Sets the text content of the component based on the current language, and updates it when the language changes.\r\n * @param {string} key - The key used to look up the translation.\r\n * @param {object} [placeholders] - An optional object of placeholders to replace in the translation.\r\n * @returns {Promise<void>} A promise that resolves when the localized text is set.\r\n */\r\n// @ts-ignore\r\ncomponentController.prototype.localizedText = async function (key, placeholders) {\r\n    if (!currentLang || !currentLang.value) {\r\n        // @ts-ignore\r\n        return key;\r\n    }\r\n\r\n    const localizedText = await $localizedText(key, placeholders);\r\n\r\n    // @ts-ignore\r\n    this.element.textContent = localizedText;\r\n\r\n    // Subscribe to language changes and update the text accordingly\r\n    currentLang.subscribe(async () => {\r\n        const localizedText = await $localizedText(key, placeholders);\r\n        // @ts-ignore\r\n        this.element.textContent = localizedText;\r\n    });\r\n};\r\n","/**\r\n * showIF method allows you to hide or show an element if the restingParameter is truthy\r\n * @param {Boolean} restingParameter\r\n * @param {instanceOf<$uiControl>} onTruthyElement\r\n * @param {instanceOf<$uiControl>} onFalseyElement\r\n */\r\nexport const $showIF = function (restingParameter, onTruthyElement, onFalseyElement) {\r\n    if (onTruthyElement === undefined || onFalseyElement === undefined) {\r\n        console.error(`showIF not called, one of the elements is undefined`);\r\n        return;\r\n    }\r\n    restingParameter ? onTruthyElement.show() : onTruthyElement.hide();\r\n    !restingParameter ? onFalseyElement.show() : onFalseyElement.hide();\r\n};\r\n\r\n/**\r\n * show a fallback view during an async operation, then swap it out when done.\r\n * @param {asyncFunction} resource\r\n * @param {instanceOf<$uiControl>} fallback\r\n * @param {instanceOf<$uiControl>} controlInSuspension\r\n */\r\nexport const $suspense = (resource, fallback, controlInSuspension) => {\r\n    const subscriptions = [];\r\n\r\n    const notify = () => subscriptions.forEach((subscriber) => subscriber());\r\n\r\n    if (fallback.type === \"Layout\" && controlInSuspension.type === \"Layout\") {\r\n        if (!controlInSuspension.hasChild(fallback)) {\r\n            console.error(`FallBack is not a child of ${controlInSuspension}`);\r\n            return;\r\n        }\r\n\r\n        ap.mount(fallback);\r\n\r\n        const showFallback = () => {\r\n            fallback.show();\r\n            controlInSuspension.hide();\r\n        };\r\n\r\n        const showSuspended = () => {\r\n            controlInSuspension.show();\r\n            fallback.hide();\r\n        };\r\n\r\n        showFallback();\r\n\r\n        Promise.resolve(resource())\r\n            .then(() => {\r\n                showSuspended();\r\n                notify();\r\n            })\r\n            .catch(() => showFallback());\r\n    } else {\r\n        console.error(\"suspense must be used with both containers as a layout\");\r\n    }\r\n    return {\r\n        /**\r\n         * call a function after the new view is added\r\n         * @param {Function} fn\r\n         */\r\n        effects: (fn) => subscriptions.push(fn),\r\n    };\r\n};\r\n","// @ts-nocheck\r\n\r\n/**\r\n * Hash-Based Router with Dynamic Route Parameter Support\r\n * @param {Array<Object>} hashParam\r\n */\r\nexport const $hashRouter = function (hashParam) {\r\n    const plugin = {\r\n        routes: hashParam,\r\n        currentRoute: null,\r\n        params: {},\r\n\r\n        _init: function () {\r\n            console.table(this.routes);\r\n            window.addEventListener(\"hashchange\", this._handleHashChange.bind(this));\r\n            if (window.location.hash) {\r\n                this._handleHashChange();\r\n            } else {\r\n                window.location.hash = \"#/\";\r\n            }\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @param {any} app\r\n         */\r\n        _install: function (app) {\r\n            this._init();\r\n            app.router = this;\r\n        },\r\n\r\n        _render: function () {\r\n            const appContainer = document.querySelector(\"#app\");\r\n            if (!appContainer) {\r\n                console.error(\"App container not found.\");\r\n                return;\r\n            }\r\n            appContainer.innerHTML = \"\";\r\n\r\n            if (this.currentRoute && this.currentRoute.component) {\r\n                const component = this.currentRoute.component;\r\n                appContainer.appendChild(component.element);\r\n\r\n                // Pass params to the component if updateParams is defined\r\n                if (typeof component.updateParams === \"function\") {\r\n                    component.updateParams(this.params);\r\n                }\r\n            } else {\r\n                console.error(\"No valid component found for route.\");\r\n            }\r\n        },\r\n\r\n        _handleHashChange: function () {\r\n            const hash = window.location.hash.slice(1) || \"/\";\r\n\r\n            // Find the matching route with support for dynamic parameters\r\n            const matchedRoute = this._matchRoute(hash);\r\n\r\n            if (matchedRoute) {\r\n                this.currentRoute = matchedRoute.route;\r\n                this.params = matchedRoute.params;\r\n                this._render();\r\n            } else {\r\n                console.error(`Route not found: ${hash}`);\r\n            }\r\n        },\r\n\r\n        _matchRoute(path) {\r\n            // Loop through routes to find a match with parameters\r\n            for (const route of this.routes) {\r\n                const { regex, keys } = this._pathToRegex(route.path);\r\n                const match = path.match(regex);\r\n\r\n                if (match) {\r\n                    const params = keys.reduce((acc, key, index) => {\r\n                        acc[key] = match[index + 1];\r\n                        return acc;\r\n                    }, {});\r\n                    return { route, params };\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n\r\n        _pathToRegex(path) {\r\n            // Convert route path into regex and extract parameter keys\r\n            const keys = [];\r\n            const regexString = path\r\n                .replace(/:([\\w]+)/g, (_, key) => {\r\n                    keys.push(key);\r\n                    return \"([^\\\\/]+)\";\r\n                })\r\n                .replace(/\\//g, \"\\\\/\");\r\n            return { regex: new RegExp(`^${regexString}$`), keys };\r\n        },\r\n\r\n        /**\r\n         * Navigate to a specified path with parameters\r\n         * @param {string} path\r\n         * @param {object} params\r\n         */\r\n        navigate(path, params = {}) {\r\n            // Replace each :param in the path with the corresponding value from params\r\n            const fullPath = path.replace(/:([\\w]+)/g, (_, key) => {\r\n                if (params[key] === undefined) {\r\n                    console.error(`Parameter \"${key}\" not provided for path: ${path}`);\r\n                    return `:${key}`; // Keeps the placeholder if parameter is missing\r\n                }\r\n                return params[key];\r\n            });\r\n\r\n            window.location.hash = fullPath;\r\n        },\r\n\r\n        back: function () {\r\n            history.back();\r\n        },\r\n\r\n        forward: function () {\r\n            history.forward();\r\n        },\r\n    };\r\n    return plugin;\r\n};\r\n","import { componentController } from \"./control.js\";\r\nimport { generateId } from \"./helpers.js\";\r\n\r\n/** @typedef {string} HtmlTag */\r\n\r\n/**\r\n * Initializes an HTML element with specified properties and attaches it to a parent component.\r\n * @class\r\n * @extends componentController\r\n */\r\nlet $ElementInitializer = class extends componentController {\r\n    /**\r\n     * Creates an HTML element.\r\n     * @param {HtmlTag} tag - The HTML tag name to create (e.g., 'div', 'span').\r\n     * @param {componentController} parent - The parent component to attach to.\r\n     * @param {Object<string, any>} props - An object containing properties to set on the element.\r\n     */\r\n    constructor(tag, parent, props) {\r\n        super();\r\n\r\n        this.element = document.createElement(tag);\r\n        this.element.id = generateId();\r\n\r\n        Object.entries(props).forEach(([key, value]) => {\r\n            requestAnimationFrame(() => {\r\n                if (key in this.element) {\r\n                    /** @type {any} */ (this.element)[key] = value;\r\n                } else {\r\n                    console.warn(`Property ${key} does not exist on element.`);\r\n                }\r\n            });\r\n        });\r\n\r\n        if (parent instanceof componentController) {\r\n            parent.addChild(this);\r\n        } else {\r\n            console.error(\"No Parent For Component To Attach To.\");\r\n            return;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Creates and initializes a new HTML component.\r\n * @param {HtmlTag} tag - The HTML tag name to create.\r\n * @param {componentController} parent - The parent component to attach to.\r\n * @param {Object<string, any>} [props={}] - An object containing properties to set on the element.\r\n * @returns {$ElementInitializer} - The initialized HTML component.\r\n */\r\nexport const $Element = function (tag, parent, props = {}) {\r\n    return new $ElementInitializer(tag, parent, props);\r\n};\r\n"],"names":["styles","_a","localizedText"],"mappings":";;AAAA,IAAI,UAAU,GACV,iBAAiB;AAMd,MAAM,aAAa,WAAY;AAClC,SAAO,aAAa,SAAS;AACjC;AAMO,MAAM,oBAAoB,WAAY;AACzC,SAAO,gBAAgB,gBAAgB;AAC3C;ACVO,MAAM,YAAY,CAAC,WAAW,WAAW;AAC5C,QAAM,YAAY;AAClB,QAAM,aAAa,SAAS,YAAY,CAAC;AAEzC,MAAI,YAAY;AAGhB,MAAI,iBAAiB,CAAA;AAGrB,MAAI,kBAAkB,CAAA;AAOtB,QAAM,cAAc,CAACA,SAAQ,aAAa;AACtC,QAAI,aAAa;AACjB,WAAO,QAAQA,OAAM,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAC7C,UAAI,OAAO,UAAU,UAAU;AAC3B,YAAI,IAAI,WAAW,GAAG,GAAG;AAErB,0BAAgB,KAAK;AAAA,YACjB,OAAO;AAAA,YACP;AAAA,YACA,QAAQ;AAAA,UAChC,CAAqB;AAAA,QACJ,WAAU,IAAI,WAAW,IAAI,GAAG;AAE7B,gBAAM,cAAc,IAAI,QAAQ,KAAK,QAAQ;AAC7C,yBAAe,KAAK;AAAA,YAChB,UAAU;AAAA,YACV,QAAQ;AAAA,UAChC,CAAqB;AAAA,QACrB,OAAuB;AAEH,yBAAe,KAAK;AAAA,YAChB,UAAU,GAAG,QAAQ,IAAI,GAAG;AAAA,YAC5B,QAAQ;AAAA,UAChC,CAAqB;AAAA,QACJ;AAAA,MACjB,OAAmB;AAEH,sBAAc,GAAG,IAAI,QAAQ,YAAY,KAAK,EAAE,aAAa,KAAK,KAAK;AAAA,MAC1E;AAAA,IACb,CAAS;AACD,WAAO;AAAA,EACf;AAGI,MAAI,OAAO,WAAW,YAAY,CAAC,MAAM,QAAQ,MAAM,GAAG;AAEtD,gBAAY,YAAY,QAAQ,IAAI,SAAS,EAAE;AAAA,EAClD,WAAU,MAAM,QAAQ,MAAM,GAAG;AAE9B,gBAAY,OAAO,OAAO,CAAC,QAAQ,KAAK,MAAM;AAC1C,aAAO,SAAS,OAAO,OAAO,CAAC,KAAK;AAAA,IACvC,GAAE,EAAE;AAAA,EACR;AAGD,MAAI,WAAW;AACX,eAAW,WAAW,IAAI,SAAS,MAAM,SAAS,MAAM,WAAW,SAAS,MAAM;AAAA,EACrF;AAGD,iBAAe,QAAQ,CAAC,EAAE,UAAU,QAAAA,QAAM,MAAO;AAC7C,UAAM,kBAAkB,YAAYA,SAAQ,QAAQ;AACpD,QAAI,iBAAiB;AACjB,iBAAW;AAAA,QACP,GAAG,QAAQ,MAAM,eAAe;AAAA,QAChC,WAAW,SAAS;AAAA,MACpC;AAAA,IACS;AAAA,EACT,CAAK;AAGD,kBAAgB,QAAQ,CAAC,EAAE,OAAO,UAAU,QAAAA,QAAM,MAAO;AACrD,UAAM,kBAAkB,YAAYA,SAAQ,QAAQ;AACpD,QAAI,iBAAiB;AACjB,iBAAW;AAAA,QACP,GAAG,KAAK,MAAM,QAAQ,MAAM,eAAe;AAAA,QAC3C,WAAW,SAAS;AAAA,MACpC;AAAA,IACS;AAAA,EACT,CAAK;AAED,SAAO;AACX;AC7FO,MAAM,oBAAoB;AAAA,EAC7B,cAAc;AAEV,SAAK,UAAU;AAGf,SAAK,iBAAiB;AAGtB,SAAK,iBAAiB;EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,SAAS,OAAO;AACZ,QAAI,iBAAiB,uBAAuB,KAAK,SAAS;AACtD,WAAK,QAAQ,YAAY,MAAM,OAAO;AAAA,IAClD,OAAe;AACH,cAAQ,MAAM,yCAAyC;AAAA,IAC1D;AACD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,UAAU,SAAS;AACf,QAAI,SAAS;AACT,iBAAW,KAAK,SAAS,OAAO;AAAA,IAC5C,OAAe;AACH,cAAQ,IAAI,6BAA6B;AAAA,IAC5C;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,OAAO;AACT,WAAO,QAAQ,KAAK,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAC5C,4BAAsB,MAAM;AACxB,YAAI,KAAK,SAAS;AACd,eAAK,QAAQ,GAAG,IAAI;AAAA,QACvB;AAAA,MACjB,CAAa;AAAA,IACb,CAAS;AACD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,GAAG,OAAO,SAAS;;AACf,eAAK,YAAL,mBAAc,iBAAiB,OAAO;AACtC,SAAK,eAAe,KAAK,CAAC,OAAO,OAAO,CAAC;AACzC,WAAO;AAAA,EACV;AAAA,EAED,IAAI,QAAQ;;AACR,UAAM,YAAY,UAAU,MAAM;AAClC,eAAK,YAAL,mBAAc,UAAU,IAAI;AAC5B,SAAK,eAAe,KAAK,SAAS;AAClC,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,aAAa,OAAO;;AAChB,QAAI,iBAAiB,qBAAqB;AACtC,YAAM,eAAe,QAAQ,CAAC,CAAC,OAAO,EAAE,MAAM;;AAC1C,SAAAC,MAAA,MAAM,YAAN,gBAAAA,IAAe,oBAAoB,OAAO;AAAA,MAC1D,CAAa;AACD,kBAAM,YAAN,mBAAe;AAAA,IAC3B,OAAe;AACH,cAAQ,MAAM,iCAAiC;AAAA,IAClD;AACD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA,EAKD,OAAO;AACH,SAAK,IAAI,EAAE,YAAY,UAAW,CAAA;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA,EAKD,OAAO;AACH,SAAK,IAAI,EAAE,YAAY,SAAU,CAAA;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAKD,OAAO;AACH,SAAK,IAAI;AAAA,MACL,SAAS;AAAA,MACT,YAAY;AAAA,IACxB,CAAS;AAAA,EACJ;AACL;AChHA,IAAI,cAAc;AAAA,EACd;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AAOO,MAAM,aAAa,CAAC,SAAS,YAAY;AAC5C,QAAM,YAAY;AAAA,IACd,aAAa,MAAM;AACf,cAAQ,UAAU,IAAI,aAAa;AAAA,IACtC;AAAA,IACD,QAAQ,MAAM;AACV,UAAI,YAAY,UAAU;AAAA,QACtB,OAAO;AAAA,QACP,QAAQ,OAAO,cAAc;AAAA,MAC7C,CAAa;AACD,cAAQ,UAAU,IAAI,SAAS;AAAA,IAClC;AAAA,IACD,OAAO,MAAM;AACT,UAAI,YAAY,UAAU;AAAA,QACtB,OAAO;AAAA,MACvB,CAAa;AACD,cAAQ,UAAU,IAAI,SAAS;AAAA,IAClC;AAAA,IACD,OAAO,MAAM;AACT,UAAI,YAAY,UAAU;AAAA,QACtB,QAAQ,OAAO,cAAc;AAAA,MAC7C,CAAa;AACD,cAAQ,UAAU,IAAI,SAAS;AAAA,IAClC;AAAA,IACD,UAAU,MAAM;AACZ,UAAI,YAAY,UAAU;AAAA,QACtB,UAAU;AAAA,MAC1B,CAAa;AACD,cAAQ,UAAU,IAAI,SAAS;AAAA,IAClC;AAAA,IACD,SAAS,MAAM;AACX,UAAI,YAAY,UAAU;AAAA,QACtB,WAAW;AAAA,MAC3B,CAAa;AACD,cAAQ,UAAU,IAAI,SAAS;AAAA,IAClC;AAAA,IACD,SAAS,MAAM;AACX,UAAI,YAAY,UAAU;AAAA,QACtB,WAAW;AAAA,MAC3B,CAAa;AACD,cAAQ,UAAU,IAAI,SAAS;AAAA,IAClC;AAAA,IACD,MAAM,MAAM;AACR,UAAI,YAAY,UAAU;AAAA,QACtB,SAAS;AAAA,QACT,gBAAgB;AAAA,MAChC,CAAa;AACD,cAAQ,UAAU,IAAI,SAAS;AAAA,IAClC;AAAA,IACD,OAAO,MAAM;AACT,UAAI,YAAY,UAAU;AAAA,QACtB,SAAS;AAAA,QACT,gBAAgB;AAAA,MAChC,CAAa;AACD,cAAQ,UAAU,IAAI,SAAS;AAAA,IAClC;AAAA,IACD,QAAQ,MAAM;AACV,UAAI,YAAY,UAAU;AAAA,QACtB,SAAS;AAAA,QACT,YAAY;AAAA,QACZ,gBAAgB;AAAA,MAChC,CAAa;AACD,cAAQ,UAAU,IAAI,SAAS;AAAA,IAClC;AAAA,IACD,SAAS,MAAM;AACX,UAAI,YAAY,UAAU;AAAA,QACtB,SAAS;AAAA,QACT,gBAAgB;AAAA,QAChB,YAAY;AAAA,MAC5B,CAAa;AACD,cAAQ,UAAU,IAAI,SAAS;AAAA,IAClC;AAAA,IACD,QAAQ,MAAM;AACV,UAAI,YAAY,UAAU;AAAA,QACtB,SAAS;AAAA,QACT,YAAY;AAAA,MAC5B,CAAa;AACD,cAAQ,UAAU,IAAI,SAAS;AAAA,IAClC;AAAA,IACD,KAAK,MAAM;AACP,UAAI,YAAY,UAAU;AAAA,QACtB,SAAS;AAAA,QACT,YAAY;AAAA,MAC5B,CAAa;AACD,cAAQ,UAAU,IAAI,SAAS;AAAA,IAClC;AAAA,IACD,YAAY,MAAM;AACd,UAAI,YAAY,UAAU;AAAA,QACtB,SAAS;AAAA,QACT,eAAe;AAAA,MAC/B,CAAa;AACD,cAAQ,UAAU,IAAI,SAAS;AAAA,IAClC;AAAA,IACD,UAAU,MAAM;AACZ,UAAI,YAAY,UAAU;AAAA,QACtB,SAAS;AAAA,QACT,eAAe;AAAA,MAC/B,CAAa;AACD,cAAQ,UAAU,IAAI,SAAS;AAAA,IAClC;AAAA,EACT;AAEI,UACK,YAAa,EACb,QAAQ,OAAO,EAAE,EACjB,MAAM,GAAG,EACT,QAAQ,CAAC,OAAO;AACb,QAAI,YAAY,SAAS,EAAE,GAAG;AAE1B,gBAAU,EAAE;IAC5B,OAAmB;AACH,cAAQ,MAAM,mBAAmB,EAAE,EAAE;AAAA,IACxC;AAAA,EACb,CAAS;AACT;AAQA,SAAS,aAAa,QAAQ,MAAM,SAAS;AACzC,YAAU,WAAW,QAAQ,OAAO,IAAI;AACxC,MAAI,aAAa,KAAK;AAEtB,MAAI,cAAc,UAAU;AACxB,QAAI,YAAY,UAAU;AAAA,MACtB,SAAS;AAAA,MACT,UAAU;AAAA,MACV,eAAe;AAAA,IAC3B,CAAS;AACD,WAAO,UAAU,IAAI,SAAS;AAAA,EACtC,WAAe,cAAc,YAAY;AACjC,QAAI,YAAY,UAAU;AAAA,MACtB,SAAS;AAAA,IACrB,CAAS;AACD,WAAO,UAAU,IAAI,SAAS;AAAA,EACtC,WAAe,eAAe,SAAS;AAC/B,WAAO,MAAM,WAAW;AAAA,EAChC,WAAe,eAAe,SAAS;AAC/B,QAAI,YAAY,UAAU;AAAA,MACtB,SAAS;AAAA;AAAA,MAET,eAAe,QAAQ,SAAS,UAAU,IAAI,WAAW;AAAA,IACrE,CAAS;AACD,WAAO,UAAU,IAAI,SAAS;AAAA,EACtC,OAAW;AACH,YAAQ,MAAM,mBAAmB,MAAM;AAAA,EAC1C;AACL;AAMA,MAAM,qBAAqB,cAAc,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMzD,YAAY,MAAM,SAAS;AACvB;AACA,SAAK,UAAU,SAAS,cAAc,KAAK;AAC3C,SAAK,QAAQ,KAAK;AAElB,SAAK,QAAQ,OAAO;AACpB,WAAO,aAAa,KAAK,SAAS,MAAM,OAAO,IAAI;AAAA,EACtD;AACL;AAOY,MAAC,gBAAgB,SAAU,0BAA0B;AAC7D,SAAO,IAAI,mBAAmB,UAAU,wBAAwB;AACpE;AAOY,MAAC,kBAAkB,SAAU,0BAA0B;AAC/D,SAAO,IAAI,mBAAmB,YAAY,wBAAwB;AACtE;AAOY,MAAC,eAAe,SAAU,0BAA0B;AAC5D,SAAO,IAAI,mBAAmB,SAAS,wBAAwB;AACnE;AAOY,MAAC,iBAAiB,SAAU,mBAAmB,cAAc;AACrE,SAAO,IAAI,mBAAmB,SAAS,gBAAgB;AAC3D;ACjNY,MAAC,aAAa,SAAU,eAAe;AAC/C,QAAM,MAAM;AAAA,IACR,gBAAgB;AAAA,IAChB,UAAU,CAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOZ,OAAO,SAAU,UAAU;AACvB,YAAM,YAAY,SAAS,cAAc,QAAQ;AACjD,UAAI,CAAC,WAAW;AACZ,gBAAQ,MAAM,kCAAkC,QAAQ,GAAG;AAC3D,eAAO;AAAA,MACV;AAED,eAAS,KAAK,MAAM,SAAS;AAC7B,eAAS,KAAK,MAAM,QAAQ;AAE5B,gBAAU,YAAY;AACtB,YAAM,WAAW,KAAK;AAItB,UAAI,YAAY,SAAS,SAAS;AAE9B,kBAAU,YAAY,SAAS,OAAO;AAAA,MACtD,OAAmB;AACH,gBAAQ,MAAM,mDAAmD;AAAA,MACpE;AAED,aAAO;AAAA,IACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOD,KAAK,SAAU,QAAQ;AAEnB,UAAI,UAAU,OAAO,OAAO,aAAa,YAAY;AAEjD,eAAO,SAAS,IAAI;AAEpB,aAAK,SAAS,KAAK,MAAM;AAAA,MACzC,OAAmB;AACH,gBAAQ,KAAK,sCAAsC,MAAM;AAAA,MAC5D;AACD,aAAO;AAAA,IACV;AAAA,EACT;AACI,SAAO;AACX;AC1EY,MAAC,UAAU,SAAU,eAAe,MAAM;AAClD,MAAI,oBAAoB;AACxB,MAAI,gBAAgB,CAAA;AAMpB,QAAM,SAAS,SAAU,IAAI;AACzB,aAAS,cAAc,eAAe;AAClC,iBAAW,iBAAiB;AAAA,IAC/B;AAAA,EACT;AACI,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA,IAKH,IAAI,MAAM,KAAK;AACX,0BAAoB;AACpB;IACH;AAAA;AAAA;AAAA;AAAA;AAAA,IAMD,IAAI,QAAQ;AACR,aAAO;AAAA,IACV;AAAA;AAAA;AAAA;AAAA;AAAA,IAMD,WAAW,CAAC,OAAO;AACf,oBAAc,KAAK,EAAE;AAAA,IACxB;AAAA,EACT;AACA;AAMY,MAAC,SAAS,SAAU,eAAe,IAAI;AAC/C,MAAI,QAAQ,EAAE,GAAG;AACjB,QAAM,YAAY,oBAAI;AAEtB,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA,IAKH,IAAI,KAAK,OAAO;AACZ,YAAM,GAAG,IAAI;AACb,gBAAU,QAAQ,CAAC,aAAa,SAAS,KAAK,CAAC;AAAA,IAClD;AAAA;AAAA;AAAA;AAAA;AAAA,IAMD,IAAI,KAAK;AACL,aAAO,MAAM,GAAG;AAAA,IACnB;AAAA;AAAA;AAAA;AAAA;AAAA,IAMD,UAAU,UAAU;AAChB,gBAAU,IAAI,QAAQ;AACtB,aAAO,MAAM,UAAU,OAAO,QAAQ;AAAA,IACzC;AAAA,EACT;AACA;AC7EA,MAAM,kBAAkB,UAAU;AAClC,MAAM,kBAAkB,gBAAgB,MAAM,GAAG,EAAE,CAAC;AACpD,IAAI,eAAe,CAAA;AAGnB,IAAI;AASQ,MAAC,YAAY,eAAgB,cAAc,iBAAiB,YAAY;AAChF,gBAAc,QAAQ,WAAW;AAEjC,QAAM,WAAW,MAAM,MAAM,UAAU;AACvC,MAAI,CAAC,SAAS,IAAI;AACd,YAAQ,IAAI,6BAA6B;AACzC;AAAA,EACH;AAED,QAAM,qBAAqB,MAAM,SAAS;AAC1C,iBAAe,EAAE,GAAG,cAAc,GAAG,mBAAkB;AAC3D;AAMY,MAAC,eAAe,SAAU,UAAU;AAC5C,cAAY,QAAQ;AACxB;AAQA,IAAI,iBAAiB,SAAU,KAAK,cAAc;AAC9C,MAAI,CAAC,eAAe,CAAC,YAAY,OAAO;AACpC,WAAO;AAAA,EACV;AAGD,QAAM,WAAW,aAAa,YAAY,KAAK,KAAK,aAAa,eAAe,KAAK;AACrF,MAAI,cAAc,SAAS,GAAG,KAAK;AACnC,MAAI,cAAc;AACd,WAAO,KAAK,YAAY,EAAE,QAAQ,CAAC,gBAAgB;AAE/C,oBAAc,YAAY,QAAQ,IAAI,WAAW,KAAK,aAAa,WAAW,CAAC;AAAA,IAC3F,CAAS;AAAA,EACJ;AACD,SAAO;AACX;AASA,oBAAoB,UAAU,gBAAgB,eAAgB,KAAK,cAAc;AAC7E,MAAI,CAAC,eAAe,CAAC,YAAY,OAAO;AAEpC,WAAO;AAAA,EACV;AAED,QAAM,gBAAgB,MAAM,eAAe,KAAK,YAAY;AAG5D,OAAK,QAAQ,cAAc;AAG3B,cAAY,UAAU,YAAY;AAC9B,UAAMC,iBAAgB,MAAM,eAAe,KAAK,YAAY;AAE5D,SAAK,QAAQ,cAAcA;AAAA,EACnC,CAAK;AACL;AC/EY,MAAC,UAAU,SAAU,kBAAkB,iBAAiB,iBAAiB;AACjF,MAAI,oBAAoB,UAAa,oBAAoB,QAAW;AAChE,YAAQ,MAAM,qDAAqD;AACnE;AAAA,EACH;AACD,qBAAmB,gBAAgB,KAAM,IAAG,gBAAgB,KAAI;AAChE,GAAC,mBAAmB,gBAAgB,KAAM,IAAG,gBAAgB,KAAI;AACrE;AAQY,MAAC,YAAY,CAAC,UAAU,UAAU,wBAAwB;AAClE,QAAM,gBAAgB,CAAA;AAEtB,QAAM,SAAS,MAAM,cAAc,QAAQ,CAAC,eAAe,WAAU,CAAE;AAEvE,MAAI,SAAS,SAAS,YAAY,oBAAoB,SAAS,UAAU;AACrE,QAAI,CAAC,oBAAoB,SAAS,QAAQ,GAAG;AACzC,cAAQ,MAAM,8BAA8B,mBAAmB,EAAE;AACjE;AAAA,IACH;AAED,OAAG,MAAM,QAAQ;AAEjB,UAAM,eAAe,MAAM;AACvB,eAAS,KAAI;AACb,0BAAoB,KAAI;AAAA,IACpC;AAEQ,UAAM,gBAAgB,MAAM;AACxB,0BAAoB,KAAI;AACxB,eAAS,KAAI;AAAA,IACzB;AAEQ;AAEA,YAAQ,QAAQ,UAAU,EACrB,KAAK,MAAM;AACR;AACA;IAChB,CAAa,EACA,MAAM,MAAM,aAAY,CAAE;AAAA,EACvC,OAAW;AACH,YAAQ,MAAM,wDAAwD;AAAA,EACzE;AACD,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA,IAKH,SAAS,CAAC,OAAO,cAAc,KAAK,EAAE;AAAA,EAC9C;AACA;ACxDY,MAAC,cAAc,SAAU,WAAW;AAC5C,QAAM,SAAS;AAAA,IACX,QAAQ;AAAA,IACR,cAAc;AAAA,IACd,QAAQ,CAAE;AAAA,IAEV,OAAO,WAAY;AACf,cAAQ,MAAM,KAAK,MAAM;AACzB,aAAO,iBAAiB,cAAc,KAAK,kBAAkB,KAAK,IAAI,CAAC;AACvE,UAAI,OAAO,SAAS,MAAM;AACtB,aAAK,kBAAiB;AAAA,MACtC,OAAmB;AACH,eAAO,SAAS,OAAO;AAAA,MAC1B;AACD,aAAO;AAAA,IACV;AAAA;AAAA;AAAA;AAAA,IAKD,UAAU,SAAU,KAAK;AACrB,WAAK,MAAK;AACV,UAAI,SAAS;AAAA,IAChB;AAAA,IAED,SAAS,WAAY;AACjB,YAAM,eAAe,SAAS,cAAc,MAAM;AAClD,UAAI,CAAC,cAAc;AACf,gBAAQ,MAAM,0BAA0B;AACxC;AAAA,MACH;AACD,mBAAa,YAAY;AAEzB,UAAI,KAAK,gBAAgB,KAAK,aAAa,WAAW;AAClD,cAAM,YAAY,KAAK,aAAa;AACpC,qBAAa,YAAY,UAAU,OAAO;AAG1C,YAAI,OAAO,UAAU,iBAAiB,YAAY;AAC9C,oBAAU,aAAa,KAAK,MAAM;AAAA,QACrC;AAAA,MACjB,OAAmB;AACH,gBAAQ,MAAM,qCAAqC;AAAA,MACtD;AAAA,IACJ;AAAA,IAED,mBAAmB,WAAY;AAC3B,YAAM,OAAO,OAAO,SAAS,KAAK,MAAM,CAAC,KAAK;AAG9C,YAAM,eAAe,KAAK,YAAY,IAAI;AAE1C,UAAI,cAAc;AACd,aAAK,eAAe,aAAa;AACjC,aAAK,SAAS,aAAa;AAC3B,aAAK,QAAO;AAAA,MAC5B,OAAmB;AACH,gBAAQ,MAAM,oBAAoB,IAAI,EAAE;AAAA,MAC3C;AAAA,IACJ;AAAA,IAED,YAAY,MAAM;AAEd,iBAAW,SAAS,KAAK,QAAQ;AAC7B,cAAM,EAAE,OAAO,KAAM,IAAG,KAAK,aAAa,MAAM,IAAI;AACpD,cAAM,QAAQ,KAAK,MAAM,KAAK;AAE9B,YAAI,OAAO;AACP,gBAAM,SAAS,KAAK,OAAO,CAAC,KAAK,KAAK,UAAU;AAC5C,gBAAI,GAAG,IAAI,MAAM,QAAQ,CAAC;AAC1B,mBAAO;AAAA,UACV,GAAE,CAAE,CAAA;AACL,iBAAO,EAAE,OAAO;QACnB;AAAA,MACJ;AACD,aAAO;AAAA,IACV;AAAA,IAED,aAAa,MAAM;AAEf,YAAM,OAAO,CAAA;AACb,YAAM,cAAc,KACf,QAAQ,aAAa,CAAC,GAAG,QAAQ;AAC9B,aAAK,KAAK,GAAG;AACb,eAAO;AAAA,MAC3B,CAAiB,EACA,QAAQ,OAAO,KAAK;AACzB,aAAO,EAAE,OAAO,IAAI,OAAO,IAAI,WAAW,GAAG,GAAG;IACnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOD,SAAS,MAAM,SAAS,IAAI;AAExB,YAAM,WAAW,KAAK,QAAQ,aAAa,CAAC,GAAG,QAAQ;AACnD,YAAI,OAAO,GAAG,MAAM,QAAW;AAC3B,kBAAQ,MAAM,cAAc,GAAG,4BAA4B,IAAI,EAAE;AACjE,iBAAO,IAAI,GAAG;AAAA,QACjB;AACD,eAAO,OAAO,GAAG;AAAA,MACjC,CAAa;AAED,aAAO,SAAS,OAAO;AAAA,IAC1B;AAAA,IAED,MAAM,WAAY;AACd,cAAQ,KAAI;AAAA,IACf;AAAA,IAED,SAAS,WAAY;AACjB,cAAQ,QAAO;AAAA,IAClB;AAAA,EACT;AACI,SAAO;AACX;ACjHA,IAAI,sBAAsB,cAAc,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxD,YAAY,KAAK,QAAQ,OAAO;AAC5B;AAEA,SAAK,UAAU,SAAS,cAAc,GAAG;AACzC,SAAK,QAAQ,KAAK;AAElB,WAAO,QAAQ,KAAK,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAC5C,4BAAsB,MAAM;AACxB,YAAI,OAAO,KAAK,SAAS;AACF,UAAC,KAAK,QAAS,GAAG,IAAI;AAAA,QAC7D,OAAuB;AACH,kBAAQ,KAAK,YAAY,GAAG,6BAA6B;AAAA,QAC5D;AAAA,MACjB,CAAa;AAAA,IACb,CAAS;AAED,QAAI,kBAAkB,qBAAqB;AACvC,aAAO,SAAS,IAAI;AAAA,IAChC,OAAe;AACH,cAAQ,MAAM,uCAAuC;AACrD;AAAA,IACH;AAAA,EACJ;AACL;AASY,MAAC,WAAW,SAAU,KAAK,QAAQ,QAAQ,CAAA,GAAI;AACvD,SAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK;AACrD;;;;;;;;;;;;;;"}